setwd("~/Documents/info478/workbook-2-yuhanizaly/disability-weights")
library(dplyr)
library(tidyr)
library(ggplot2)
# Set up -- make sure to set your working directory
library(dplyr)
library(tidyr)
library(ggplot2)
# Load global data (disease burden in 2015, both sexes, all ages)
global_data <- read.csv(
"./data/prepped/global_burden.csv",
stringsAsFactors = FALSE
)
View(global_data)
# Replace NA as 0 for deaths, ylls, ylds
global_data[is.na(global_data)] <- 0
most_death <- global_data %>%
filter(deaths == math(deaths)) %>%
pull(cause)
most_death <- global_data %>%
filter(deaths == math(deaths)) %>%
pull(cause)
# What disease was responsible for the most burden (for each metric)?
# Store the name of each *cause* in a variable
most_death <- global_data %>%
filter(deaths == max(deaths)) %>%
pull(cause)
most_ylls <- global_data %>%
filter(ylls == max(ylls)) %>%
pull(cause)
most_ylds <- global_data %>%
filter(ylds == max(ylds)) %>%
pull(cause)
most_dalys <- global_data %>%
filter(dalys == max(dalys)) %>%
pull(cause)
global_data <- global_data %>%
mutate(dw_computed = ylds / prevalence)
global_data$dw_computed[global_data$dw_computed > 1] <- NA
# Create a histogram of the disability weights
ggplot(global_data) +geom_histogram(mapping = aes(x = dw_computed))
# What are the ten highest disability weights? Store these in a variable
top_10_dw <- global_data %>%
top_n(dw_computed)
View(top_10_dw)
# What are the ten highest disability weights? Store these in a variable
top_10_dw <- global_data %>%
top_n(10, dw_computed)
View(top_10_dw)
top_10_dw
top_10_dw <- global_data %>%
top_n(10, -dw_computed)
# What are the ten highest disability weights? Store these in a variable
top_10_dw <- global_data %>%
top_n(10, dw_computed) %>%
select(cause, dw_computed)
# What are the ten highest disability weights? Store these in a variable
top_10_dw <- global_data %>%
top_n(10, dw_computed) %>%
select(cause, -dw_computed)
top_10_dw <- global_data %>%
top_n(10, dw_computed) %>%
select(cause, -dw_computed)
top_10_dw <- global_data %>%
top_n(10, dw_computed) %>%
select(cause, dw_computed)
more_disabling <- global_data %>%
filter(ylds > ylls, ylls > 0)
more_disabling
View(more_disabling)
# Which diseases have more YLDs than YLLs (and ylls > 0)?
more_disabling <- global_data %>%
filter(ylds > ylls, ylls > 0) %>%
pull(cause)
more_disabling <- global_data %>%
filter(ylds > ylls, ylls > 0)
View(more_disabling)
higher_prevalence <- more_disabling %>%
mutate(prev_death_ratio = prevalence / deaths)
higher_prevalence
View(higher_prevalence)
higher_prevalence <- more_disabling %>%
mutate(prev_death_ratio = prevalence / deaths)
geom_histogram(mapping = aes(prev_death_ratio))
higher_prevalence
higher_prevalence <- more_disabling %>%
mutate(prev_death_ratio = prevalence / deaths)
higher_prevalence <- ggplot(higher_prevalence) +
geom_histogram(mapping = aes(prev_death_ratio))
higher_prevalence
most_similar <- global_data %>%
mutate(yll_yld_diff = abs(ylls - ylds)) %>%
filter(ylls > 0)
ylds
View(most_similar)
# Which disease has the most similar burden of YLLs and YLDs (where ylls > 0)?
most_similar <- global_data %>%
mutate(yll_yld_diff = abs(ylls - ylds)) %>%
filter(ylls > 0) %>%
filter(yll_yld_diff == min(yll_yld_diff))
most_similar
pull(cause)
most_similar <- global_data %>%
mutate(yll_yld_diff = abs(ylls - ylds)) %>%
filter(ylls > 0) %>%
filter(yll_yld_diff == min(yll_yld_diff))
pull(cause)
# Which disease has the most similar burden of YLLs and YLDs (where ylls > 0)?
most_similar <- global_data %>%
mutate(yll_yld_diff = abs(ylls - ylds)) %>%
filter(ylls > 0) %>%
filter(yll_yld_diff == min(yll_yld_diff)) %>%
pull(cause)
most_similar
global_data <- global_data %>%
mutate(num_cases_avoided = 65 / dw_computed)
View(global_data)
